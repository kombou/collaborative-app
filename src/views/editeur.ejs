<!doctype html>
<html>
  <head>
    <title>Collaborative Editor</title>
  </head>
  <style>
        html,body {
        height: 100%;
        width: 100%;
        background-color: #333;
        font-family: arial;
        }
        #editor-wrapper {
        width: 70%;
        margin-left: auto;
        margin-right: auto;
        margin-top: 3em;
        }
        #username {
        color: #f3f3f3;
        }
        .cuser {
        color: blue;
        }
        .ouser {
        color: chartreuse;
        }
        .btn {
            background-color: green;
            color: wheat
        }
  </style>
  <body>
        <button class="btn" id="newdoc">New Document</button>
        <div id="editor-wrapper">
                <span class="cuser">Current User: </span><span id="username"></span><br>
                <textarea id="editor"></textarea>
        </div>

        <script src="/bower_components/codemirror/lib/codemirror.js"></script>
        <link rel="stylesheet" href="/bower_components/codemirror/lib/codemirror.css">
        <script src="/bower_components/codemirror/mode/javascript/javascript.js"></script>
        <script src="/socket.io"></script>
        <script src="/bower_components/jquery/dist/jquery.min.js"></script>

        <script>
            var myCodeMirror = CodeMirror.fromTextArea(document.getElementById("editor"), {
                lineNumbers: true,
                lineWrapping: true,
                mode: "javascript",
            });
            var COLORS = [
                '#e21400', '#91580f', '#f8a700', '#f78b00',
                '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
                '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
            ];
            var USERS = [];
            /*user = {
                id: string;
                position: any;
            }*/

            var socket = io();
        
            var room = getParameterByName("room");
            var user = getParameterByName("user");
            const cursorElement = getCursorNode(user);


            //let marker = myCodeMirror.setBookmark(myCodeMirror.getCursor(), { widget: cursorElement });

             myCodeMirror.on("keyup", function() {
                var current_pos = myCodeMirror.getCursor();

                console.log(current_pos);
                var msg = {
                id: room,
                user: user,
                value: myCodeMirror.getValue(),
                cursor: current_pos
                };
                
                socket.emit("document-update", msg);
            });
            
            socket.on("doc", (msg) => {

                let inside = false ;
                let i = 0;

                console.log(USERS);

                if (msg.new_val.id === room && msg.new_val.user != user) {
                    var current_pos = myCodeMirror.getCursor();
                    myCodeMirror.getDoc().setValue(msg.new_val.value);
                    myCodeMirror.setCursor(current_pos);

                    while(i < USERS.length){
                    if(USERS[i].id === msg.new_val.user){
                        inside = true;
                        USERS[i].position = msg.new_val.cursor;
                        console.log("cursor change");
                    }
                    myCodeMirror.setBookmark(USERS[i].position, {widget: cursorElement});
                    i++;
                }
                if(inside === false){
                    USERS.push({id: msg.new_val.user, position: msg.new_val.cursor});
                    myCodeMirror.setBookmark(msg.new_val.cursor, {widget: cursorElement});
                    console.log("User insert");
                }

                
                }
            });

            function getParameterByName(name, url) {
                if (!url) url = window.location.href;
                name = name.replace(/[\[\]]/g, "\\$&");
                var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
                if (!results) return null;
                if (!results[2]) return "";
                return decodeURIComponent(results[2].replace(/\+/g, " "));
            }

            $.ajax({
                url: "/getData/" + room,
                success: function(result, status, xhr) {
                myCodeMirror.setValue(result.value);
                }
            });

             function getCursorNode(user) {
                const cursorCoords = myCodeMirror.cursorCoords(myCodeMirror.getCursor());
                console.log(cursorCoords);
                const cursorElement = document.createElement('span');
                    cursorElement.style.borderLeftStyle = 'solid';
                    cursorElement.style.borderLeftWidth = '2px';
                    cursorElement.style.borderLeftColor = getUsernameColor(user);
                    cursorElement.style.height = `${(cursorCoords.bottom - cursorCoords.top)}px`;
                    cursorElement.style.padding = 0;
                    cursorElement.style.zIndex = 0;
                return cursorElement;
            }

            function getUsernameColor(username) {
            // Compute hash code
                var hash = 7;
                for (var i = 0; i < username.length; i++) {
                hash = username.charCodeAt(i) + (hash << 5) - hash;
                }
                // Attribuer une couleur
                var index = Math.abs(hash % COLORS.length);
                return COLORS[index];
            }
            document.getElementById("username").innerHTML = user;

        </script>
  </body>
</html>